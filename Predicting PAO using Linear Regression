#importing the required packages
import numpy as np
import pandas as pd
import sklearn
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

datafile=pd.read_csv('E:/files/hpcl/pao1.csv') #importing a source file from a research paper

#describing the data
datafile.head
datafile.dtypes
datafile.describe()
plt.figure(figsize=(4, 4))
sns.heatmap(datafile.corr(), annot=True)
for i in datafile.columns:
    plt.title(f'Distribution of feature {i}')
    datafile[i].plot(kind='kde')
    plt.xlabel(f'{i}')
    plt.grid(False)
    plt.figure(figsize=(4, 4))
    
#importing packages for the linear regression model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.metrics import mean_absolute_error
x=datafile.drop('Viscosity', axis=1)
y=datafile.Viscosity

#using a while loop to print all iterations of the train-test model with different test sizes
i=0.1
while (i<0.6):
    x_train, x_valid, y_train, y_valid = train_test_split (x,y, test_size=i, random_state=30)
    lm=LinearRegression()
    lm.fit(x_train, y_train)
    predict_test=lm.predict(x_valid)
    print("The Linear Regression coefficient at", i, "is", lm.coef_)
    print("Intercept at", i, "is", lm.intercept_)
    print("MAE for test data is", np.round(mean_absolute_error(y_valid,predict_test),0))
    print("R2 for test data is", np.round(lm.score(x_valid,y_valid)*100,0))
    print("R2 for train data is", np.round(lm.score(x_train,y_train)*100,0))
    print("MSE for test data is", np.round(metrics.mean_squared_error(y_valid,predict_test),0))
    print("\n")
    i=i+0.1
